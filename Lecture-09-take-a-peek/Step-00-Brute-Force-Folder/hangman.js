// ************************ WORD REVEAL ************************// ----<< VARIABLES >>----  // ===========>>> Create accessibly scoped variables    var secretWord = '';    var secretWordArray = [];    var secretHint = '';    // new object to hold letters objects generated on intialization    var letterObjectArray = [];    var guessedArray = [];    // TEST    var testObject = {};    var testArray =[];    // track how many guesses have be taken thus far    var remainingGuesses = 3;  // ===========>>> Create js objects from the html    var startButton = document.getElementById("start-button");    var resetButton = document.getElementById("reset-button");    var guessButton = document.getElementById("guess-button");    var guessCounter = document.getElementById("guess-counter")    var wordTable = document.getElementById("word-table");    var wordHint = document.getElementById("word-hint");// ----<< KEYBOARD OBJECTS >>----    function LetterObject(letter) {      this.letterName = letter.toUpperCase();      this.status = "nothing";      this.color = "black";      this.background = "grey";    }// ----<< FUNCTIONS >>----  // ===========>>> Create fn to INITIALIZE the game    var initializeGame = function () {      // Set the word and array variables:      secretWord = "";      secretWordArray = [];      // Set the initial table row that will hold the secret letters      var row = wordTable.insertRow(0);      row.setAttribute("class","letters");      // +++ Set an array equivalent to the number of tiles (e.g. 9)     // THIS was not necessary- duplicated in 'tiler.js'      // var picArray = ['tile01','tile02','tile03','tile04','tile05','tile06','tile07','tile08','tile09']      // +++ reset the tiles styling (tiler file)      for (var i = 0; i < tileArray.length; i++) {        tileArray[i].style.visibility = "visible";      }      //+++ verify the changes in console      // console.log(wordTable)      // console.log("nn" + wordTable.count)      // return console.log ("The secret word is " + "'" + secretWord+"'");    };  //  *** RESET *** ==> Create a function to reset game data  // @@ Killed this code in favor of a document reload    /*var resetGame = function () {      // set variables      var tableRows = document.getElementsByClassName("letters");      var tableLength = tableRows.length;       // delete all of  word row(s) from the table      if (tableLength > 0) {        // important that 'i <', and not '<=' to avoid null value        for (var i = 0; i < tableLength; i++) {        document.getElementById("word-table").deleteRow(tableRows[i]);        }; // end for      }; // end if      // ++ Log the data      console.log(secretWord, secretWordArray)      return initializeGame();    };// end resetGame*/  // ===========>>> Create a fn to prompt user for a SECRET WORD    var getSecretWord = function () {      // establish new game variables      var spaces = /\s+/gi      // had to make sure secretWord remains as originally entered      secretWord = prompt("Enter a secret word")      // create new variable to display as shifted      var newSecretWord = secretWord.replace(spaces, "-");      secretWordArray = newSecretWord.toUpperCase().split("");      return secretWordArray    };  // ===========>>> Create a fn to prompt user for a HINT    // takes a hint input from user and displays it in the game area    var getHint = function () {      secretHint = prompt("Enter your hint here");      wordHint.innerHTML= secretHint;    };  // ===========>>> Create a fn REVEAL letters- via background color    var revealLetter = function(myGuess) {      var elms = document.getElementsByClassName("letter-"+ myGuess);      // match and change letters      for(i=0; i<elms.length; i++) {        elms[i].style.color="orange";      } // end for    }; // end revealLetter  // ===========>>> Create a fn REVEAL word- via background color    var revealWord = function(myGuess) {      var elms = document.getElementsByClassName("single-letter");      // match and change letters      for(i=0; i<elms.length; i++) {        elms[i].style.color="orangered";      } // end for    }; // end revealLetter  // ===========>>> Create a fn to SETUP the board (keyboard)    var setBoard = function (array) {      // Create the board based on secret word length        var wordLength = array.length;        // should only be one row but needed classes to eliminate excess        // !!! set an id and a class for clearing rows        var tableSet = document.getElementsByClassName("letters");        var tableRow = tableSet[0];        // set loop to build the html game board (word only)        for(i=0; i < wordLength; i++) {          var newLetter = array[i]          var dash = /[-]+/i          var letterBox = document.createElement("td");          // establish class vs id in case duplicate letters in the word          // set a general class for all letters          letterBox.setAttribute("class","single-letter letter-"+ newLetter);          // set the letter value for the table item (td)          letterBox.innerHTML= newLetter;          // add the item to the table row          tableRow.appendChild(letterBox);        }; // end for loop        return    };  // ===========>>> Create a fn to check INCLUSION in secret word    var letterInclude = function(array,guess) {      var letter = guess.toUpperCase()      return array.includes(letter)    }  // ===========>>> Create a fn to check win STATUS in secret word    // var wordRevealStatus = function (array) {     // use the 'every' method on the word array to see if all are yet revealed (boolean)     // if this is true, then delcare the game is over and reset the game    // };  // ===========>>> Assign a function to muliple buttons (alphabet)    // create a test funtion    var testForLetter = function() {      // grab the inner content of the list item      // !! bug: don't forget to add "()" or uppercase won't 'function'      var guess = this.innerHTML.toUpperCase();      if (letterInclude(secretWordArray, guess)) {          revealLetter(guess);          // set the background color of the clicked key if guessed          this.style.background="lime";          this.style.color = "green";        } else {          guessedArray.push(guess);          console.log(guessedArray);          // set the background color of the clicked key if guessed          this.style.background="pink";          this.style.color = "red";          removeTile();        };    }    // create a letter making function for a better array     var letterMaker = function(name,object) {        var name = {name:object}        testArray.push(name)     };    // identify the full keyboard set    var alphaSet = document.getElementById("alpha-set");    // grab the set of alphaKeys    var alphaKeys = alphaSet.getElementsByTagName("li");    // ---> Assigns the `onclick`function to each of the alphabet keys    for (var i = 0 ; i < alphaKeys.length; i++) {      // var for the item      var alpha = alphaKeys[i]      // assigns a function to each element in hmtl      alpha.onclick = testForLetter      // establish a capitalized name for the component      var capInner = alpha.innerHTML.toUpperCase()      // var letName = "letter"+ capInner      // creates a new Letter object      var newLetter = new LetterObject(capInner);      letterMaker(capInner,newLetter);      // letterObjectArray.push(newLetter)      // testObject.capInner = newLetter    }      console.log(testArray);  // ===========>>> Assign fn to update GUESSES counter      var updateGuessCounter = function() {        if (remainingGuesses <= 1) {          return gameOver();        } else {        remainingGuesses -= 1;        // !! should be DRY        guessCounter.innerHTML = remainingGuesses;        return alert("Sorry, Try guessing again: " + remainingGuesses);        }// end if      };  // ===========>>> Assign a function for GUESSING the secret word    var guessSecret = function(guess){      // capitalize to ensure a tighter test of matching      var sec = secretWord.toUpperCase();      var gus = guess.toUpperCase();      // Check for equivalence without type conversion '==='      if (gus === sec) {        revealWord();        guessButton.disabled = true;        document.getElementById('alpha-set').style.pointerEvents = 'none';        wordHint.style.color="orangered";        wordHint.innerHTML = "You did it!! The correct word is " + "'" + secretWord + "'"      } else {         return updateGuessCounter();      } // end if    } // end guessSecret  // ===========>>> Assign a function for ENDING the game    var gameOver = function() {      // !!! add some kind of ending pattern      guessButton.disabled = true;      document.getElementById('alpha-set').style.pointerEvents = 'none';      alert("THE GAME IS OVER!!");        guessCounter.innerHTML = 0;    };// ----<<< BUTTONS >>>----  // ===========>>> Set action of "START" button:initialize    // !!! Refactor to pull additional functionality out of start button    startButton.onclick = function () {      // run the initializing function to clear the board      initializeGame();      // start game with prompt and setting up board via this fn      var word = getSecretWord ();      setBoard(word);      // Add a hint to the game area      getHint();      // ++ test logging to verify word entry      var nodesArray = wordTable.childNodes;      startButton.disabled = true;      console.log (nodesArray.length);      return console.log ("The NOW secret word is " + "'" + secretWord+"'");    };  // ===========>>> Set the action for the "GUESSING" button    guessButton.onclick = function(){        var guess = prompt("Try to guess the secret word!");        guessSecret(guess);        console.log(remainingGuesses);        return updateGuessCounter;      }  // ===========>>> Set the action for the "RESET" button    resetButton.onclick = function(){      // return resetGame();      // reload the page from the cache       return location.reload();    };  // ===========>>> Set the action for the "WORD" button    // Button to select when ready to guess a word- connect to a form